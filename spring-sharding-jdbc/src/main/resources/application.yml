#配置应用名称-注册时使用
spring:
 application:
  name: sharding-jdbc
 profile: dev

 http:
  encoding:
   charset: UTF-8
   enabled: true
   force: true
 main:
  allow-bean-definition-overriding: true     # 針對bean被重複定義，重複則覆蓋

 ## sharding-jdbc 分片规则配置
 # 数据源
 shardingsphere:
  datasource:
   names: ds1, ds2 # ds 数据源别名
   # 数据库连接池配置
   ds1:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3306/db_sharding?useSSL=false&useUnicode=true&characterEncoding=utf-8&allowMultiQueries=true
    username: root
    password: root2019
   ds2:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3306/db_sharding_01?useSSL=false&useUnicode=true&characterEncoding=utf-8&allowMultiQueries=true
    username: root
    password: root2019
  sharding:
   # 广播表，所有分库中保存同样的数据
   broadcast-tables: t_dict
   tables: # 指定t_order表的數據分佈情況配置數據節點
    t_order:  # 数据库中分表对应的逻辑表
     database-strategy:
      inline:
       sharding-column: user_id # 以 order_id 进行分表
       algorithm-expression: ds$->{user_id % 2 + 1}

     # 真实数据节点，由数据源名+ 表名组成
     actual-data-nodes: ds$->{1..2}.t_order_$->{1..2}
     # 指定t_order表的主鍵生成策略
     key-generator:
      column: order_id # 表主键
      type: SNOWFLAKE # 主键生成策略，SNOWFLAKE(雪花算法，全局主键自增)
     # 指定t_order表的分片策略，分片策略包括分片建和分片算法
     table-strategy:  # 分表策略
      inline:  # 行表达式分片策略  其它策略：standard、complex、hint、none
       sharding-column: order_id # 以 order_id 进行分表
       algorithm-expression: t_order_$->{order_id % 2 + 1} # order_id 取模进行分片，如 order_id 尾数为偶数则存入 t_order_1中，否则存入 t_order_2 中
  # 打印sql输出日志
  props:
   sql:
    show: true

mybatis:
 configuration:
  map-underscore-to-canel-case: true
